import { Start, Update, Ctx, On } from 'nestjs-telegraf';
import { Context } from 'src/interfaces/context.interface';
import { UserService } from './User.service';
import { OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { InjectBot } from 'nestjs-telegraf';
import { ADMIN_ID, SBORKA_CHAT_ID } from 'src/consts/telegram_ids';

@Update()
export class UserUpdate implements OnModuleInit, OnModuleDestroy {
  constructor(
    private readonly service: UserService,
    @InjectBot()
    private readonly bot: Telegraf,
  ) {}

  async onModuleInit() {
    const message_text = `–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`;
    try {
      await this.bot.telegram.sendMessage(ADMIN_ID, message_text); // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      //await this.bot.telegram.sendMessage(SBORKA_CHAT_ID, message_text); <== –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–±–æ—Ä–∫–∏
    } catch (error) {
      console.error('Error sending initial message:'.red, error);
    }
    this.bot.on('message', (ctx) => {
      this.service.messageAnswer(ctx);
    });
  }

  async onModuleDestroy() {
    const shutdownMessage = `–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω! –í—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è: ${new Date().toLocaleString()}`;
    try {
      await this.bot.telegram.sendMessage(ADMIN_ID, shutdownMessage);
      await this.bot.telegram.sendMessage(SBORKA_CHAT_ID, shutdownMessage);
      console.log('Shutdown message sent successfully');
    } catch (error) {
      console.error('Error sending shutdown message:'.red, error);
    }
  }

  @Start()
  async onStart(@Ctx() ctx: Context) {
    return this.service.start(ctx);
  }

  @On('message')
  async onMessage(@Ctx() ctx: Context) {
    console.log('Message received:', {
      message: ctx.message,
      from: ctx.from,
      chat: ctx.chat,
    });

    try {
      const message = ctx.message as any;

      if ('text' in message) {
        const text = message.text.toLowerCase();
        console.log('Processing text message:', text);

        if (text.includes('–ø—Ä–∏–≤–µ—Ç') || text.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
          return ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! üòä`);
        } else if (text.includes('–∫–∞–∫ –¥–µ–ª–∞')) {
          return ctx.reply('–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è –∫–∞–∫? üòä');
        } else {
          return ctx.reply('–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üëç');
        }
      }

      return ctx.reply('–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üòÖ');
    } catch (error) {
      console.error('Error processing message:', error);
      return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è üò¢');
    }
  }
}
